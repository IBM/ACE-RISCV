[package]
name = "security-monitor"
version = "0.2.0"
authors = ["Wojciech Ozga <woz@zurich.ibm.com>"]
description = "Security monitor implementation for the canonical confidential computing for RISC-V"
edition = "2021"

[dependencies]
# This crate simplifies access to RISC-V registers
# we do not use the upstream version because it still lacks
# support for the hypervisor extension
riscv = {path = "rust-crates/riscv"}

riscv-decode = "0.2" # decodes RISC-V instructions unfortunately it does not support the C-instructions yet

# flattened device tree parser
fdt-rs = {version = "0.4", default-features = false} 

# Rust bindings to OpenSBI C code.
opensbi-sys = {path = "rust-crates/opensbi-sys"}

# spin provides synchronization primitives (Mutexes etc) using spinlocks
spin = "0.9"

# allows parsing untrusted input without using unsafe rust
# used commonly in safety&security critical applications
# for example, in cryptographic libraries
# untrusted = "0.9"

# provides macros that help removing boilerplate code in rust error handling
thiserror-no-std = "2.0" 

[dependencies.memoffset]
version = "0.8"
features = ["unstable_const"]

[lib]
name="sm"
crate-type=["staticlib"]

[build-dependencies]

[features]
# verbose feature enables printing out debug information from the security monitor
verbose = []

[profile.release]
# required by https://crates.io/crates/cargo-call-stack
lto = 'fat'
# enables check for integer overflows in runtime. This will incurrs performance overhead
# a properly done formal verification of the security monitor would obsolete this feature
overflow-checks = true
