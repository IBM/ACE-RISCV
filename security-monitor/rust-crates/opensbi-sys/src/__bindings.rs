/* automatically generated by rust-bindgen 0.60.1 */

pub const PRILX: &[u8; 6usize] = b"016lx\0";
pub const TRUE: u32 = 1;
pub const FALSE: u32 = 0;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const MSTATUS_SPIE_SHIFT: u32 = 5;
pub const MSTATUS_SPP_SHIFT: u32 = 8;
pub const MSTATUS_MPP_SHIFT: u32 = 11;
pub const MSTATUS_GVA_SHIFT: u32 = 38;
pub const SSTATUS_SPIE_SHIFT: u32 = 5;
pub const SSTATUS_SPP_SHIFT: u32 = 8;
pub const HSTATUS_VSXL_SHIFT: u32 = 32;
pub const HSTATUS_VGEIN_SHIFT: u32 = 12;
pub const IRQ_S_SOFT: u32 = 1;
pub const IRQ_VS_SOFT: u32 = 2;
pub const IRQ_M_SOFT: u32 = 3;
pub const IRQ_S_TIMER: u32 = 5;
pub const IRQ_VS_TIMER: u32 = 6;
pub const IRQ_M_TIMER: u32 = 7;
pub const IRQ_S_EXT: u32 = 9;
pub const IRQ_VS_EXT: u32 = 10;
pub const IRQ_M_EXT: u32 = 11;
pub const IRQ_S_GEXT: u32 = 12;
pub const IRQ_PMU_OVF: u32 = 13;
pub const HGATP32_MODE_SHIFT: u32 = 31;
pub const HGATP32_VMID_SHIFT: u32 = 22;
pub const HGATP64_MODE_SHIFT: u32 = 60;
pub const HGATP64_VMID_SHIFT: u32 = 44;
pub const PMP_SHIFT: u32 = 2;
pub const PMP_COUNT: u32 = 64;
pub const HGATP_VMID_SHIFT: u32 = 44;
pub const HGATP_MODE_SHIFT: u32 = 60;
pub const TOPI_IID_SHIFT: u32 = 16;
pub const TOPI_IID_MASK: u32 = 4095;
pub const TOPI_IPRIO_MASK: u32 = 255;
pub const ENVCFG_CBIE_SHIFT: u32 = 4;
pub const CSR_USTATUS: u32 = 0;
pub const CSR_UIE: u32 = 4;
pub const CSR_UTVEC: u32 = 5;
pub const CSR_USCRATCH: u32 = 64;
pub const CSR_UEPC: u32 = 65;
pub const CSR_UCAUSE: u32 = 66;
pub const CSR_UTVAL: u32 = 67;
pub const CSR_UIP: u32 = 68;
pub const CSR_FFLAGS: u32 = 1;
pub const CSR_FRM: u32 = 2;
pub const CSR_FCSR: u32 = 3;
pub const CSR_CYCLE: u32 = 3072;
pub const CSR_TIME: u32 = 3073;
pub const CSR_INSTRET: u32 = 3074;
pub const CSR_HPMCOUNTER3: u32 = 3075;
pub const CSR_HPMCOUNTER4: u32 = 3076;
pub const CSR_HPMCOUNTER5: u32 = 3077;
pub const CSR_HPMCOUNTER6: u32 = 3078;
pub const CSR_HPMCOUNTER7: u32 = 3079;
pub const CSR_HPMCOUNTER8: u32 = 3080;
pub const CSR_HPMCOUNTER9: u32 = 3081;
pub const CSR_HPMCOUNTER10: u32 = 3082;
pub const CSR_HPMCOUNTER11: u32 = 3083;
pub const CSR_HPMCOUNTER12: u32 = 3084;
pub const CSR_HPMCOUNTER13: u32 = 3085;
pub const CSR_HPMCOUNTER14: u32 = 3086;
pub const CSR_HPMCOUNTER15: u32 = 3087;
pub const CSR_HPMCOUNTER16: u32 = 3088;
pub const CSR_HPMCOUNTER17: u32 = 3089;
pub const CSR_HPMCOUNTER18: u32 = 3090;
pub const CSR_HPMCOUNTER19: u32 = 3091;
pub const CSR_HPMCOUNTER20: u32 = 3092;
pub const CSR_HPMCOUNTER21: u32 = 3093;
pub const CSR_HPMCOUNTER22: u32 = 3094;
pub const CSR_HPMCOUNTER23: u32 = 3095;
pub const CSR_HPMCOUNTER24: u32 = 3096;
pub const CSR_HPMCOUNTER25: u32 = 3097;
pub const CSR_HPMCOUNTER26: u32 = 3098;
pub const CSR_HPMCOUNTER27: u32 = 3099;
pub const CSR_HPMCOUNTER28: u32 = 3100;
pub const CSR_HPMCOUNTER29: u32 = 3101;
pub const CSR_HPMCOUNTER30: u32 = 3102;
pub const CSR_HPMCOUNTER31: u32 = 3103;
pub const CSR_CYCLEH: u32 = 3200;
pub const CSR_TIMEH: u32 = 3201;
pub const CSR_INSTRETH: u32 = 3202;
pub const CSR_HPMCOUNTER3H: u32 = 3203;
pub const CSR_HPMCOUNTER4H: u32 = 3204;
pub const CSR_HPMCOUNTER5H: u32 = 3205;
pub const CSR_HPMCOUNTER6H: u32 = 3206;
pub const CSR_HPMCOUNTER7H: u32 = 3207;
pub const CSR_HPMCOUNTER8H: u32 = 3208;
pub const CSR_HPMCOUNTER9H: u32 = 3209;
pub const CSR_HPMCOUNTER10H: u32 = 3210;
pub const CSR_HPMCOUNTER11H: u32 = 3211;
pub const CSR_HPMCOUNTER12H: u32 = 3212;
pub const CSR_HPMCOUNTER13H: u32 = 3213;
pub const CSR_HPMCOUNTER14H: u32 = 3214;
pub const CSR_HPMCOUNTER15H: u32 = 3215;
pub const CSR_HPMCOUNTER16H: u32 = 3216;
pub const CSR_HPMCOUNTER17H: u32 = 3217;
pub const CSR_HPMCOUNTER18H: u32 = 3218;
pub const CSR_HPMCOUNTER19H: u32 = 3219;
pub const CSR_HPMCOUNTER20H: u32 = 3220;
pub const CSR_HPMCOUNTER21H: u32 = 3221;
pub const CSR_HPMCOUNTER22H: u32 = 3222;
pub const CSR_HPMCOUNTER23H: u32 = 3223;
pub const CSR_HPMCOUNTER24H: u32 = 3224;
pub const CSR_HPMCOUNTER25H: u32 = 3225;
pub const CSR_HPMCOUNTER26H: u32 = 3226;
pub const CSR_HPMCOUNTER27H: u32 = 3227;
pub const CSR_HPMCOUNTER28H: u32 = 3228;
pub const CSR_HPMCOUNTER29H: u32 = 3229;
pub const CSR_HPMCOUNTER30H: u32 = 3230;
pub const CSR_HPMCOUNTER31H: u32 = 3231;
pub const CSR_SSTATUS: u32 = 256;
pub const CSR_SIE: u32 = 260;
pub const CSR_STVEC: u32 = 261;
pub const CSR_SCOUNTEREN: u32 = 262;
pub const CSR_SENVCFG: u32 = 266;
pub const CSR_SSCRATCH: u32 = 320;
pub const CSR_SEPC: u32 = 321;
pub const CSR_SCAUSE: u32 = 322;
pub const CSR_STVAL: u32 = 323;
pub const CSR_SIP: u32 = 324;
pub const CSR_STIMECMP: u32 = 333;
pub const CSR_STIMECMPH: u32 = 349;
pub const CSR_SATP: u32 = 384;
pub const CSR_SISELECT: u32 = 336;
pub const CSR_SIREG: u32 = 337;
pub const CSR_STOPEI: u32 = 348;
pub const CSR_STOPI: u32 = 3504;
pub const CSR_SIEH: u32 = 276;
pub const CSR_SIPH: u32 = 340;
pub const CSR_SSTATEEN0: u32 = 268;
pub const CSR_SSTATEEN1: u32 = 269;
pub const CSR_SSTATEEN2: u32 = 270;
pub const CSR_SSTATEEN3: u32 = 271;
pub const CSR_HSTATUS: u32 = 1536;
pub const CSR_HEDELEG: u32 = 1538;
pub const CSR_HIDELEG: u32 = 1539;
pub const CSR_HIE: u32 = 1540;
pub const CSR_HCOUNTEREN: u32 = 1542;
pub const CSR_HGEIE: u32 = 1543;
pub const CSR_HENVCFG: u32 = 1546;
pub const CSR_HENVCFGH: u32 = 1562;
pub const CSR_HTVAL: u32 = 1603;
pub const CSR_HIP: u32 = 1604;
pub const CSR_HVIP: u32 = 1605;
pub const CSR_HTINST: u32 = 1610;
pub const CSR_HGEIP: u32 = 3602;
pub const CSR_HGATP: u32 = 1664;
pub const CSR_HTIMEDELTA: u32 = 1541;
pub const CSR_HTIMEDELTAH: u32 = 1557;
pub const CSR_VSSTATUS: u32 = 512;
pub const CSR_VSIE: u32 = 516;
pub const CSR_VSTVEC: u32 = 517;
pub const CSR_VSSCRATCH: u32 = 576;
pub const CSR_VSEPC: u32 = 577;
pub const CSR_VSCAUSE: u32 = 578;
pub const CSR_VSTVAL: u32 = 579;
pub const CSR_VSIP: u32 = 580;
pub const CSR_VSATP: u32 = 640;
pub const CSR_HVIEN: u32 = 1544;
pub const CSR_HVICTL: u32 = 1545;
pub const CSR_HVIPRIO1: u32 = 1606;
pub const CSR_HVIPRIO2: u32 = 1607;
pub const CSR_VSISELECT: u32 = 592;
pub const CSR_VSIREG: u32 = 593;
pub const CSR_VSTOPEI: u32 = 604;
pub const CSR_VSTOPI: u32 = 3760;
pub const CSR_HIDELEGH: u32 = 1555;
pub const CSR_HVIENH: u32 = 1560;
pub const CSR_HVIPH: u32 = 1621;
pub const CSR_HVIPRIO1H: u32 = 1622;
pub const CSR_HVIPRIO2H: u32 = 1623;
pub const CSR_VSIEH: u32 = 532;
pub const CSR_VSIPH: u32 = 596;
pub const CSR_HSTATEEN0: u32 = 1548;
pub const CSR_HSTATEEN0H: u32 = 1564;
pub const CSR_HSTATEEN1: u32 = 1549;
pub const CSR_HSTATEEN1H: u32 = 1565;
pub const CSR_HSTATEEN2: u32 = 1550;
pub const CSR_HSTATEEN2H: u32 = 1566;
pub const CSR_HSTATEEN3: u32 = 1551;
pub const CSR_HSTATEEN3H: u32 = 1567;
pub const CSR_MVENDORID: u32 = 3857;
pub const CSR_MARCHID: u32 = 3858;
pub const CSR_MIMPID: u32 = 3859;
pub const CSR_MHARTID: u32 = 3860;
pub const CSR_MSTATUS: u32 = 768;
pub const CSR_MISA: u32 = 769;
pub const CSR_MEDELEG: u32 = 770;
pub const CSR_MIDELEG: u32 = 771;
pub const CSR_MIE: u32 = 772;
pub const CSR_MTVEC: u32 = 773;
pub const CSR_MCOUNTEREN: u32 = 774;
pub const CSR_MSTATUSH: u32 = 784;
pub const CSR_MENVCFG: u32 = 778;
pub const CSR_MENVCFGH: u32 = 794;
pub const CSR_MSCRATCH: u32 = 832;
pub const CSR_MEPC: u32 = 833;
pub const CSR_MCAUSE: u32 = 834;
pub const CSR_MTVAL: u32 = 835;
pub const CSR_MIP: u32 = 836;
pub const CSR_MTINST: u32 = 842;
pub const CSR_MTVAL2: u32 = 843;
pub const CSR_PMPCFG0: u32 = 928;
pub const CSR_PMPCFG1: u32 = 929;
pub const CSR_PMPCFG2: u32 = 930;
pub const CSR_PMPCFG3: u32 = 931;
pub const CSR_PMPCFG4: u32 = 932;
pub const CSR_PMPCFG5: u32 = 933;
pub const CSR_PMPCFG6: u32 = 934;
pub const CSR_PMPCFG7: u32 = 935;
pub const CSR_PMPCFG8: u32 = 936;
pub const CSR_PMPCFG9: u32 = 937;
pub const CSR_PMPCFG10: u32 = 938;
pub const CSR_PMPCFG11: u32 = 939;
pub const CSR_PMPCFG12: u32 = 940;
pub const CSR_PMPCFG13: u32 = 941;
pub const CSR_PMPCFG14: u32 = 942;
pub const CSR_PMPCFG15: u32 = 943;
pub const CSR_PMPADDR0: u32 = 944;
pub const CSR_PMPADDR1: u32 = 945;
pub const CSR_PMPADDR2: u32 = 946;
pub const CSR_PMPADDR3: u32 = 947;
pub const CSR_PMPADDR4: u32 = 948;
pub const CSR_PMPADDR5: u32 = 949;
pub const CSR_PMPADDR6: u32 = 950;
pub const CSR_PMPADDR7: u32 = 951;
pub const CSR_PMPADDR8: u32 = 952;
pub const CSR_PMPADDR9: u32 = 953;
pub const CSR_PMPADDR10: u32 = 954;
pub const CSR_PMPADDR11: u32 = 955;
pub const CSR_PMPADDR12: u32 = 956;
pub const CSR_PMPADDR13: u32 = 957;
pub const CSR_PMPADDR14: u32 = 958;
pub const CSR_PMPADDR15: u32 = 959;
pub const CSR_PMPADDR16: u32 = 960;
pub const CSR_PMPADDR17: u32 = 961;
pub const CSR_PMPADDR18: u32 = 962;
pub const CSR_PMPADDR19: u32 = 963;
pub const CSR_PMPADDR20: u32 = 964;
pub const CSR_PMPADDR21: u32 = 965;
pub const CSR_PMPADDR22: u32 = 966;
pub const CSR_PMPADDR23: u32 = 967;
pub const CSR_PMPADDR24: u32 = 968;
pub const CSR_PMPADDR25: u32 = 969;
pub const CSR_PMPADDR26: u32 = 970;
pub const CSR_PMPADDR27: u32 = 971;
pub const CSR_PMPADDR28: u32 = 972;
pub const CSR_PMPADDR29: u32 = 973;
pub const CSR_PMPADDR30: u32 = 974;
pub const CSR_PMPADDR31: u32 = 975;
pub const CSR_PMPADDR32: u32 = 976;
pub const CSR_PMPADDR33: u32 = 977;
pub const CSR_PMPADDR34: u32 = 978;
pub const CSR_PMPADDR35: u32 = 979;
pub const CSR_PMPADDR36: u32 = 980;
pub const CSR_PMPADDR37: u32 = 981;
pub const CSR_PMPADDR38: u32 = 982;
pub const CSR_PMPADDR39: u32 = 983;
pub const CSR_PMPADDR40: u32 = 984;
pub const CSR_PMPADDR41: u32 = 985;
pub const CSR_PMPADDR42: u32 = 986;
pub const CSR_PMPADDR43: u32 = 987;
pub const CSR_PMPADDR44: u32 = 988;
pub const CSR_PMPADDR45: u32 = 989;
pub const CSR_PMPADDR46: u32 = 990;
pub const CSR_PMPADDR47: u32 = 991;
pub const CSR_PMPADDR48: u32 = 992;
pub const CSR_PMPADDR49: u32 = 993;
pub const CSR_PMPADDR50: u32 = 994;
pub const CSR_PMPADDR51: u32 = 995;
pub const CSR_PMPADDR52: u32 = 996;
pub const CSR_PMPADDR53: u32 = 997;
pub const CSR_PMPADDR54: u32 = 998;
pub const CSR_PMPADDR55: u32 = 999;
pub const CSR_PMPADDR56: u32 = 1000;
pub const CSR_PMPADDR57: u32 = 1001;
pub const CSR_PMPADDR58: u32 = 1002;
pub const CSR_PMPADDR59: u32 = 1003;
pub const CSR_PMPADDR60: u32 = 1004;
pub const CSR_PMPADDR61: u32 = 1005;
pub const CSR_PMPADDR62: u32 = 1006;
pub const CSR_PMPADDR63: u32 = 1007;
pub const CSR_MCYCLE: u32 = 2816;
pub const CSR_MINSTRET: u32 = 2818;
pub const CSR_MHPMCOUNTER3: u32 = 2819;
pub const CSR_MHPMCOUNTER4: u32 = 2820;
pub const CSR_MHPMCOUNTER5: u32 = 2821;
pub const CSR_MHPMCOUNTER6: u32 = 2822;
pub const CSR_MHPMCOUNTER7: u32 = 2823;
pub const CSR_MHPMCOUNTER8: u32 = 2824;
pub const CSR_MHPMCOUNTER9: u32 = 2825;
pub const CSR_MHPMCOUNTER10: u32 = 2826;
pub const CSR_MHPMCOUNTER11: u32 = 2827;
pub const CSR_MHPMCOUNTER12: u32 = 2828;
pub const CSR_MHPMCOUNTER13: u32 = 2829;
pub const CSR_MHPMCOUNTER14: u32 = 2830;
pub const CSR_MHPMCOUNTER15: u32 = 2831;
pub const CSR_MHPMCOUNTER16: u32 = 2832;
pub const CSR_MHPMCOUNTER17: u32 = 2833;
pub const CSR_MHPMCOUNTER18: u32 = 2834;
pub const CSR_MHPMCOUNTER19: u32 = 2835;
pub const CSR_MHPMCOUNTER20: u32 = 2836;
pub const CSR_MHPMCOUNTER21: u32 = 2837;
pub const CSR_MHPMCOUNTER22: u32 = 2838;
pub const CSR_MHPMCOUNTER23: u32 = 2839;
pub const CSR_MHPMCOUNTER24: u32 = 2840;
pub const CSR_MHPMCOUNTER25: u32 = 2841;
pub const CSR_MHPMCOUNTER26: u32 = 2842;
pub const CSR_MHPMCOUNTER27: u32 = 2843;
pub const CSR_MHPMCOUNTER28: u32 = 2844;
pub const CSR_MHPMCOUNTER29: u32 = 2845;
pub const CSR_MHPMCOUNTER30: u32 = 2846;
pub const CSR_MHPMCOUNTER31: u32 = 2847;
pub const CSR_MCYCLEH: u32 = 2944;
pub const CSR_MINSTRETH: u32 = 2946;
pub const CSR_MHPMCOUNTER3H: u32 = 2947;
pub const CSR_MHPMCOUNTER4H: u32 = 2948;
pub const CSR_MHPMCOUNTER5H: u32 = 2949;
pub const CSR_MHPMCOUNTER6H: u32 = 2950;
pub const CSR_MHPMCOUNTER7H: u32 = 2951;
pub const CSR_MHPMCOUNTER8H: u32 = 2952;
pub const CSR_MHPMCOUNTER9H: u32 = 2953;
pub const CSR_MHPMCOUNTER10H: u32 = 2954;
pub const CSR_MHPMCOUNTER11H: u32 = 2955;
pub const CSR_MHPMCOUNTER12H: u32 = 2956;
pub const CSR_MHPMCOUNTER13H: u32 = 2957;
pub const CSR_MHPMCOUNTER14H: u32 = 2958;
pub const CSR_MHPMCOUNTER15H: u32 = 2959;
pub const CSR_MHPMCOUNTER16H: u32 = 2960;
pub const CSR_MHPMCOUNTER17H: u32 = 2961;
pub const CSR_MHPMCOUNTER18H: u32 = 2962;
pub const CSR_MHPMCOUNTER19H: u32 = 2963;
pub const CSR_MHPMCOUNTER20H: u32 = 2964;
pub const CSR_MHPMCOUNTER21H: u32 = 2965;
pub const CSR_MHPMCOUNTER22H: u32 = 2966;
pub const CSR_MHPMCOUNTER23H: u32 = 2967;
pub const CSR_MHPMCOUNTER24H: u32 = 2968;
pub const CSR_MHPMCOUNTER25H: u32 = 2969;
pub const CSR_MHPMCOUNTER26H: u32 = 2970;
pub const CSR_MHPMCOUNTER27H: u32 = 2971;
pub const CSR_MHPMCOUNTER28H: u32 = 2972;
pub const CSR_MHPMCOUNTER29H: u32 = 2973;
pub const CSR_MHPMCOUNTER30H: u32 = 2974;
pub const CSR_MHPMCOUNTER31H: u32 = 2975;
pub const CSR_MCOUNTINHIBIT: u32 = 800;
pub const CSR_MHPMEVENT3: u32 = 803;
pub const CSR_MHPMEVENT4: u32 = 804;
pub const CSR_MHPMEVENT5: u32 = 805;
pub const CSR_MHPMEVENT6: u32 = 806;
pub const CSR_MHPMEVENT7: u32 = 807;
pub const CSR_MHPMEVENT8: u32 = 808;
pub const CSR_MHPMEVENT9: u32 = 809;
pub const CSR_MHPMEVENT10: u32 = 810;
pub const CSR_MHPMEVENT11: u32 = 811;
pub const CSR_MHPMEVENT12: u32 = 812;
pub const CSR_MHPMEVENT13: u32 = 813;
pub const CSR_MHPMEVENT14: u32 = 814;
pub const CSR_MHPMEVENT15: u32 = 815;
pub const CSR_MHPMEVENT16: u32 = 816;
pub const CSR_MHPMEVENT17: u32 = 817;
pub const CSR_MHPMEVENT18: u32 = 818;
pub const CSR_MHPMEVENT19: u32 = 819;
pub const CSR_MHPMEVENT20: u32 = 820;
pub const CSR_MHPMEVENT21: u32 = 821;
pub const CSR_MHPMEVENT22: u32 = 822;
pub const CSR_MHPMEVENT23: u32 = 823;
pub const CSR_MHPMEVENT24: u32 = 824;
pub const CSR_MHPMEVENT25: u32 = 825;
pub const CSR_MHPMEVENT26: u32 = 826;
pub const CSR_MHPMEVENT27: u32 = 827;
pub const CSR_MHPMEVENT28: u32 = 828;
pub const CSR_MHPMEVENT29: u32 = 829;
pub const CSR_MHPMEVENT30: u32 = 830;
pub const CSR_MHPMEVENT31: u32 = 831;
pub const CSR_MHPMEVENT3H: u32 = 1827;
pub const CSR_MHPMEVENT4H: u32 = 1828;
pub const CSR_MHPMEVENT5H: u32 = 1829;
pub const CSR_MHPMEVENT6H: u32 = 1830;
pub const CSR_MHPMEVENT7H: u32 = 1831;
pub const CSR_MHPMEVENT8H: u32 = 1832;
pub const CSR_MHPMEVENT9H: u32 = 1833;
pub const CSR_MHPMEVENT10H: u32 = 1834;
pub const CSR_MHPMEVENT11H: u32 = 1835;
pub const CSR_MHPMEVENT12H: u32 = 1836;
pub const CSR_MHPMEVENT13H: u32 = 1837;
pub const CSR_MHPMEVENT14H: u32 = 1838;
pub const CSR_MHPMEVENT15H: u32 = 1839;
pub const CSR_MHPMEVENT16H: u32 = 1840;
pub const CSR_MHPMEVENT17H: u32 = 1841;
pub const CSR_MHPMEVENT18H: u32 = 1842;
pub const CSR_MHPMEVENT19H: u32 = 1843;
pub const CSR_MHPMEVENT20H: u32 = 1844;
pub const CSR_MHPMEVENT21H: u32 = 1845;
pub const CSR_MHPMEVENT22H: u32 = 1846;
pub const CSR_MHPMEVENT23H: u32 = 1847;
pub const CSR_MHPMEVENT24H: u32 = 1848;
pub const CSR_MHPMEVENT25H: u32 = 1849;
pub const CSR_MHPMEVENT26H: u32 = 1850;
pub const CSR_MHPMEVENT27H: u32 = 1851;
pub const CSR_MHPMEVENT28H: u32 = 1852;
pub const CSR_MHPMEVENT29H: u32 = 1853;
pub const CSR_MHPMEVENT30H: u32 = 1854;
pub const CSR_MHPMEVENT31H: u32 = 1855;
pub const CSR_SCOUNTOVF: u32 = 3488;
pub const CSR_TSELECT: u32 = 1952;
pub const CSR_TDATA1: u32 = 1953;
pub const CSR_TDATA2: u32 = 1954;
pub const CSR_TDATA3: u32 = 1955;
pub const CSR_DCSR: u32 = 1968;
pub const CSR_DPC: u32 = 1969;
pub const CSR_DSCRATCH0: u32 = 1970;
pub const CSR_DSCRATCH1: u32 = 1971;
pub const CSR_MISELECT: u32 = 848;
pub const CSR_MIREG: u32 = 849;
pub const CSR_MTOPEI: u32 = 860;
pub const CSR_MTOPI: u32 = 4016;
pub const CSR_MVIEN: u32 = 776;
pub const CSR_MVIP: u32 = 777;
pub const CSR_MSTATEEN0: u32 = 780;
pub const CSR_MSTATEEN0H: u32 = 796;
pub const CSR_MSTATEEN1: u32 = 781;
pub const CSR_MSTATEEN1H: u32 = 797;
pub const CSR_MSTATEEN2: u32 = 782;
pub const CSR_MSTATEEN2H: u32 = 798;
pub const CSR_MSTATEEN3: u32 = 783;
pub const CSR_MSTATEEN3H: u32 = 799;
pub const CSR_MIDELEGH: u32 = 787;
pub const CSR_MIEH: u32 = 788;
pub const CSR_MVIENH: u32 = 792;
pub const CSR_MVIPH: u32 = 793;
pub const CSR_MIPH: u32 = 852;
pub const CAUSE_MISALIGNED_FETCH: u32 = 0;
pub const CAUSE_FETCH_ACCESS: u32 = 1;
pub const CAUSE_ILLEGAL_INSTRUCTION: u32 = 2;
pub const CAUSE_BREAKPOINT: u32 = 3;
pub const CAUSE_MISALIGNED_LOAD: u32 = 4;
pub const CAUSE_LOAD_ACCESS: u32 = 5;
pub const CAUSE_MISALIGNED_STORE: u32 = 6;
pub const CAUSE_STORE_ACCESS: u32 = 7;
pub const CAUSE_USER_ECALL: u32 = 8;
pub const CAUSE_SUPERVISOR_ECALL: u32 = 9;
pub const CAUSE_VIRTUAL_SUPERVISOR_ECALL: u32 = 10;
pub const CAUSE_MACHINE_ECALL: u32 = 11;
pub const CAUSE_FETCH_PAGE_FAULT: u32 = 12;
pub const CAUSE_LOAD_PAGE_FAULT: u32 = 13;
pub const CAUSE_STORE_PAGE_FAULT: u32 = 15;
pub const CAUSE_FETCH_GUEST_PAGE_FAULT: u32 = 20;
pub const CAUSE_LOAD_GUEST_PAGE_FAULT: u32 = 21;
pub const CAUSE_VIRTUAL_INST_FAULT: u32 = 22;
pub const CAUSE_STORE_GUEST_PAGE_FAULT: u32 = 23;
pub const SMSTATEEN_MAX_COUNT: u32 = 4;
pub const SMSTATEEN0_CS_SHIFT: u32 = 0;
pub const SMSTATEEN0_FCSR_SHIFT: u32 = 1;
pub const SMSTATEEN0_IMSIC_SHIFT: u32 = 58;
pub const SMSTATEEN0_AIA_SHIFT: u32 = 59;
pub const SMSTATEEN0_SVSLCT_SHIFT: u32 = 60;
pub const SMSTATEEN0_HSENVCFG_SHIFT: u32 = 62;
pub const SMSTATEEN_STATEN_SHIFT: u32 = 63;
pub const INSN_MATCH_LB: u32 = 3;
pub const INSN_MASK_LB: u32 = 28799;
pub const INSN_MATCH_LH: u32 = 4099;
pub const INSN_MASK_LH: u32 = 28799;
pub const INSN_MATCH_LW: u32 = 8195;
pub const INSN_MASK_LW: u32 = 28799;
pub const INSN_MATCH_LD: u32 = 12291;
pub const INSN_MASK_LD: u32 = 28799;
pub const INSN_MATCH_LBU: u32 = 16387;
pub const INSN_MASK_LBU: u32 = 28799;
pub const INSN_MATCH_LHU: u32 = 20483;
pub const INSN_MASK_LHU: u32 = 28799;
pub const INSN_MATCH_LWU: u32 = 24579;
pub const INSN_MASK_LWU: u32 = 28799;
pub const INSN_MATCH_SB: u32 = 35;
pub const INSN_MASK_SB: u32 = 28799;
pub const INSN_MATCH_SH: u32 = 4131;
pub const INSN_MASK_SH: u32 = 28799;
pub const INSN_MATCH_SW: u32 = 8227;
pub const INSN_MASK_SW: u32 = 28799;
pub const INSN_MATCH_SD: u32 = 12323;
pub const INSN_MASK_SD: u32 = 28799;
pub const INSN_MATCH_FLW: u32 = 8199;
pub const INSN_MASK_FLW: u32 = 28799;
pub const INSN_MATCH_FLD: u32 = 12295;
pub const INSN_MASK_FLD: u32 = 28799;
pub const INSN_MATCH_FLQ: u32 = 16391;
pub const INSN_MASK_FLQ: u32 = 28799;
pub const INSN_MATCH_FSW: u32 = 8231;
pub const INSN_MASK_FSW: u32 = 28799;
pub const INSN_MATCH_FSD: u32 = 12327;
pub const INSN_MASK_FSD: u32 = 28799;
pub const INSN_MATCH_FSQ: u32 = 16423;
pub const INSN_MASK_FSQ: u32 = 28799;
pub const INSN_MATCH_C_LD: u32 = 24576;
pub const INSN_MASK_C_LD: u32 = 57347;
pub const INSN_MATCH_C_SD: u32 = 57344;
pub const INSN_MASK_C_SD: u32 = 57347;
pub const INSN_MATCH_C_LW: u32 = 16384;
pub const INSN_MASK_C_LW: u32 = 57347;
pub const INSN_MATCH_C_SW: u32 = 49152;
pub const INSN_MASK_C_SW: u32 = 57347;
pub const INSN_MATCH_C_LDSP: u32 = 24578;
pub const INSN_MASK_C_LDSP: u32 = 57347;
pub const INSN_MATCH_C_SDSP: u32 = 57346;
pub const INSN_MASK_C_SDSP: u32 = 57347;
pub const INSN_MATCH_C_LWSP: u32 = 16386;
pub const INSN_MASK_C_LWSP: u32 = 57347;
pub const INSN_MATCH_C_SWSP: u32 = 49154;
pub const INSN_MASK_C_SWSP: u32 = 57347;
pub const INSN_MATCH_C_FLD: u32 = 8192;
pub const INSN_MASK_C_FLD: u32 = 57347;
pub const INSN_MATCH_C_FLW: u32 = 24576;
pub const INSN_MASK_C_FLW: u32 = 57347;
pub const INSN_MATCH_C_FSD: u32 = 40960;
pub const INSN_MASK_C_FSD: u32 = 57347;
pub const INSN_MATCH_C_FSW: u32 = 57344;
pub const INSN_MASK_C_FSW: u32 = 57347;
pub const INSN_MATCH_C_FLDSP: u32 = 8194;
pub const INSN_MASK_C_FLDSP: u32 = 57347;
pub const INSN_MATCH_C_FSDSP: u32 = 40962;
pub const INSN_MASK_C_FSDSP: u32 = 57347;
pub const INSN_MATCH_C_FLWSP: u32 = 24578;
pub const INSN_MASK_C_FLWSP: u32 = 57347;
pub const INSN_MATCH_C_FSWSP: u32 = 57346;
pub const INSN_MASK_C_FSWSP: u32 = 57347;
pub const INSN_MASK_WFI: u32 = 4294967040;
pub const INSN_MATCH_WFI: u32 = 273678336;
pub const INSN_MASK_FENCE_TSO: u32 = 4294967295;
pub const INSN_MATCH_FENCE_TSO: u32 = 2200961039;
pub const INSN_PSEUDO_VS_LOAD: u32 = 12288;
pub const INSN_PSEUDO_VS_STORE: u32 = 12320;
pub const INSN_16BIT_MASK: u32 = 3;
pub const INSN_32BIT_MASK: u32 = 28;
pub const LOG_REGBYTES: u32 = 3;
pub const REGBYTES: u32 = 8;
pub const SH_RD: u32 = 7;
pub const SH_RS1: u32 = 15;
pub const SH_RS2: u32 = 20;
pub const SH_RS2C: u32 = 2;
pub const REG_MASK: u32 = 248;
pub const MASK_FUNCT3: u32 = 28672;
pub const PAGE_SHIFT: u32 = 12;
pub const RISCV_PTR: &[u8; 7usize] = b".dword\0";
pub const RISCV_SZPTR: &[u8; 2usize] = b"8\0";
pub const RISCV_LGPTR: &[u8; 2usize] = b"3\0";
pub const BITS_PER_LONG: u32 = 64;
pub const SBI_HARTMASK_MAX_BITS: u32 = 128;
pub const SBI_PLATFORM_OPENSBI_VERSION_OFFSET: u32 = 0;
pub const SBI_PLATFORM_VERSION_OFFSET: u32 = 4;
pub const SBI_PLATFORM_NAME_OFFSET: u32 = 8;
pub const SBI_PLATFORM_FEATURES_OFFSET: u32 = 72;
pub const SBI_PLATFORM_HART_COUNT_OFFSET: u32 = 80;
pub const SBI_PLATFORM_HART_STACK_SIZE_OFFSET: u32 = 84;
pub const SBI_PLATFORM_OPS_OFFSET: u32 = 88;
pub const SBI_PLATFORM_TLB_RANGE_FLUSH_LIMIT_DEFAULT: u32 = 4096;
pub const SBI_EXT_0_1_SET_TIMER: u32 = 0;
pub const SBI_EXT_0_1_CONSOLE_PUTCHAR: u32 = 1;
pub const SBI_EXT_0_1_CONSOLE_GETCHAR: u32 = 2;
pub const SBI_EXT_0_1_CLEAR_IPI: u32 = 3;
pub const SBI_EXT_0_1_SEND_IPI: u32 = 4;
pub const SBI_EXT_0_1_REMOTE_FENCE_I: u32 = 5;
pub const SBI_EXT_0_1_REMOTE_SFENCE_VMA: u32 = 6;
pub const SBI_EXT_0_1_REMOTE_SFENCE_VMA_ASID: u32 = 7;
pub const SBI_EXT_0_1_SHUTDOWN: u32 = 8;
pub const SBI_EXT_BASE: u32 = 16;
pub const SBI_EXT_TIME: u32 = 1414090053;
pub const SBI_EXT_IPI: u32 = 7557193;
pub const SBI_EXT_RFENCE: u32 = 1380339267;
pub const SBI_EXT_HSM: u32 = 4739917;
pub const SBI_EXT_SRST: u32 = 1397904212;
pub const SBI_EXT_PMU: u32 = 5262677;
pub const SBI_EXT_BASE_GET_SPEC_VERSION: u32 = 0;
pub const SBI_EXT_BASE_GET_IMP_ID: u32 = 1;
pub const SBI_EXT_BASE_GET_IMP_VERSION: u32 = 2;
pub const SBI_EXT_BASE_PROBE_EXT: u32 = 3;
pub const SBI_EXT_BASE_GET_MVENDORID: u32 = 4;
pub const SBI_EXT_BASE_GET_MARCHID: u32 = 5;
pub const SBI_EXT_BASE_GET_MIMPID: u32 = 6;
pub const SBI_EXT_TIME_SET_TIMER: u32 = 0;
pub const SBI_EXT_IPI_SEND_IPI: u32 = 0;
pub const SBI_EXT_RFENCE_REMOTE_FENCE_I: u32 = 0;
pub const SBI_EXT_RFENCE_REMOTE_SFENCE_VMA: u32 = 1;
pub const SBI_EXT_RFENCE_REMOTE_SFENCE_VMA_ASID: u32 = 2;
pub const SBI_EXT_RFENCE_REMOTE_HFENCE_GVMA_VMID: u32 = 3;
pub const SBI_EXT_RFENCE_REMOTE_HFENCE_GVMA: u32 = 4;
pub const SBI_EXT_RFENCE_REMOTE_HFENCE_VVMA_ASID: u32 = 5;
pub const SBI_EXT_RFENCE_REMOTE_HFENCE_VVMA: u32 = 6;
pub const SBI_EXT_HSM_HART_START: u32 = 0;
pub const SBI_EXT_HSM_HART_STOP: u32 = 1;
pub const SBI_EXT_HSM_HART_GET_STATUS: u32 = 2;
pub const SBI_EXT_HSM_HART_SUSPEND: u32 = 3;
pub const SBI_HSM_STATE_STARTED: u32 = 0;
pub const SBI_HSM_STATE_STOPPED: u32 = 1;
pub const SBI_HSM_STATE_START_PENDING: u32 = 2;
pub const SBI_HSM_STATE_STOP_PENDING: u32 = 3;
pub const SBI_HSM_STATE_SUSPENDED: u32 = 4;
pub const SBI_HSM_STATE_SUSPEND_PENDING: u32 = 5;
pub const SBI_HSM_STATE_RESUME_PENDING: u32 = 6;
pub const SBI_HSM_SUSP_BASE_MASK: u32 = 2147483647;
pub const SBI_HSM_SUSP_NON_RET_BIT: u32 = 2147483648;
pub const SBI_HSM_SUSP_PLAT_BASE: u32 = 268435456;
pub const SBI_HSM_SUSPEND_RET_DEFAULT: u32 = 0;
pub const SBI_HSM_SUSPEND_RET_PLATFORM: u32 = 268435456;
pub const SBI_HSM_SUSPEND_RET_LAST: u32 = 2147483647;
pub const SBI_HSM_SUSPEND_NON_RET_DEFAULT: u32 = 2147483648;
pub const SBI_HSM_SUSPEND_NON_RET_PLATFORM: u32 = 2415919104;
pub const SBI_HSM_SUSPEND_NON_RET_LAST: u32 = 4294967295;
pub const SBI_EXT_SRST_RESET: u32 = 0;
pub const SBI_SRST_RESET_TYPE_SHUTDOWN: u32 = 0;
pub const SBI_SRST_RESET_TYPE_COLD_REBOOT: u32 = 1;
pub const SBI_SRST_RESET_TYPE_WARM_REBOOT: u32 = 2;
pub const SBI_SRST_RESET_TYPE_LAST: u32 = 2;
pub const SBI_SRST_RESET_REASON_NONE: u32 = 0;
pub const SBI_SRST_RESET_REASON_SYSFAIL: u32 = 1;
pub const SBI_EXT_PMU_NUM_COUNTERS: u32 = 0;
pub const SBI_EXT_PMU_COUNTER_GET_INFO: u32 = 1;
pub const SBI_EXT_PMU_COUNTER_CFG_MATCH: u32 = 2;
pub const SBI_EXT_PMU_COUNTER_START: u32 = 3;
pub const SBI_EXT_PMU_COUNTER_STOP: u32 = 4;
pub const SBI_EXT_PMU_COUNTER_FW_READ: u32 = 5;
pub const SBI_PMU_EVENT_IDX_OFFSET: u32 = 20;
pub const SBI_PMU_EVENT_IDX_MASK: u32 = 1048575;
pub const SBI_PMU_EVENT_IDX_CODE_MASK: u32 = 65535;
pub const SBI_PMU_EVENT_IDX_TYPE_MASK: u32 = 983040;
pub const SBI_PMU_EVENT_RAW_IDX: u32 = 131072;
pub const SBI_PMU_EVENT_IDX_INVALID: u32 = 4294967295;
pub const SBI_PMU_EVENT_HW_CACHE_OPS_RESULT: u32 = 1;
pub const SBI_PMU_EVENT_HW_CACHE_OPS_ID_MASK: u32 = 6;
pub const SBI_PMU_EVENT_HW_CACHE_OPS_ID_OFFSET: u32 = 1;
pub const SBI_PMU_EVENT_HW_CACHE_ID_MASK: u32 = 65528;
pub const SBI_PMU_EVENT_HW_CACHE_ID_OFFSET: u32 = 3;
pub const SBI_PMU_CFG_FLAG_SKIP_MATCH: u32 = 1;
pub const SBI_PMU_CFG_FLAG_CLEAR_VALUE: u32 = 2;
pub const SBI_PMU_CFG_FLAG_AUTO_START: u32 = 4;
pub const SBI_PMU_CFG_FLAG_SET_VUINH: u32 = 8;
pub const SBI_PMU_CFG_FLAG_SET_VSINH: u32 = 16;
pub const SBI_PMU_CFG_FLAG_SET_UINH: u32 = 32;
pub const SBI_PMU_CFG_FLAG_SET_SINH: u32 = 64;
pub const SBI_PMU_CFG_FLAG_SET_MINH: u32 = 128;
pub const SBI_PMU_START_FLAG_SET_INIT_VALUE: u32 = 1;
pub const SBI_PMU_STOP_FLAG_RESET: u32 = 1;
pub const SBI_SPEC_VERSION_MAJOR_OFFSET: u32 = 24;
pub const SBI_SPEC_VERSION_MAJOR_MASK: u32 = 127;
pub const SBI_SPEC_VERSION_MINOR_MASK: u32 = 16777215;
pub const SBI_EXT_VENDOR_START: u32 = 150994944;
pub const SBI_EXT_VENDOR_END: u32 = 167772159;
pub const SBI_EXT_FIRMWARE_START: u32 = 167772160;
pub const SBI_EXT_FIRMWARE_END: u32 = 184549375;
pub const SBI_SUCCESS: u32 = 0;
pub const SBI_ERR_FAILED: i32 = -1;
pub const SBI_ERR_NOT_SUPPORTED: i32 = -2;
pub const SBI_ERR_INVALID_PARAM: i32 = -3;
pub const SBI_ERR_DENIED: i32 = -4;
pub const SBI_ERR_INVALID_ADDRESS: i32 = -5;
pub const SBI_ERR_ALREADY_AVAILABLE: i32 = -6;
pub const SBI_ERR_ALREADY_STARTED: i32 = -7;
pub const SBI_ERR_ALREADY_STOPPED: i32 = -8;
pub const SBI_LAST_ERR: i32 = -8;
pub const SBI_OK: u32 = 0;
pub const SBI_EFAIL: i32 = -1;
pub const SBI_ENOTSUPP: i32 = -2;
pub const SBI_EINVAL: i32 = -3;
pub const SBI_EDENIED: i32 = -4;
pub const SBI_EINVALID_ADDR: i32 = -5;
pub const SBI_EALREADY: i32 = -6;
pub const SBI_EALREADY_STARTED: i32 = -7;
pub const SBI_EALREADY_STOPPED: i32 = -8;
pub const SBI_ENODEV: i32 = -1000;
pub const SBI_ENOSYS: i32 = -1001;
pub const SBI_ETIMEDOUT: i32 = -1002;
pub const SBI_EIO: i32 = -1003;
pub const SBI_EILL: i32 = -1004;
pub const SBI_ENOSPC: i32 = -1005;
pub const SBI_ENOMEM: i32 = -1006;
pub const SBI_ETRAP: i32 = -1007;
pub const SBI_EUNKNOWN: i32 = -1008;
pub const SBI_ENOENT: i32 = -1009;
pub const SBI_SCRATCH_SIZE: u32 = 4096;
pub const OPENSBI_VERSION_MAJOR: u32 = 1;
pub const OPENSBI_VERSION_MINOR: u32 = 1;
pub const OPENSBI_VERSION: u32 = 65537;
pub const SBI_PLATFORM_DEFAULT_HART_STACK_SIZE: u32 = 8192;
pub type s8 = core::ffi::c_char;
pub type u8_ = core::ffi::c_uchar;
pub type s16 = core::ffi::c_short;
pub type u16_ = core::ffi::c_ushort;
pub type s32 = core::ffi::c_int;
pub type u32_ = core::ffi::c_uint;
pub type s64 = core::ffi::c_long;
pub type u64_ = core::ffi::c_ulong;
pub type bool_ = core::ffi::c_int;
pub type ulong = core::ffi::c_ulong;
pub type size_t = core::ffi::c_ulong;
pub type ssize_t = core::ffi::c_long;
pub type virtual_addr_t = core::ffi::c_ulong;
pub type virtual_size_t = core::ffi::c_ulong;
pub type physical_addr_t = core::ffi::c_ulong;
pub type physical_size_t = core::ffi::c_ulong;
extern "C" {
    pub fn csr_read_num(csr_num: core::ffi::c_int) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn csr_write_num(csr_num: core::ffi::c_int, val: core::ffi::c_ulong);
}
extern "C" {
    pub fn misa_extension_imp(ext: core::ffi::c_char) -> core::ffi::c_int;
}
extern "C" {
    pub fn misa_xlen() -> core::ffi::c_int;
}
extern "C" {
    pub fn misa_string(xlen: core::ffi::c_int, out: *mut core::ffi::c_char, out_sz: core::ffi::c_uint);
}
extern "C" {
    pub fn pmp_set(n: core::ffi::c_uint, prot: core::ffi::c_ulong, addr: core::ffi::c_ulong, log2len: core::ffi::c_ulong) -> core::ffi::c_int;
}
extern "C" {
    pub fn pmp_get(n: core::ffi::c_uint, prot_out: *mut core::ffi::c_ulong, addr_out: *mut core::ffi::c_ulong, log2len: *mut core::ffi::c_ulong) -> core::ffi::c_int;
}
extern "C" {
    pub fn find_first_bit(addr: *const core::ffi::c_ulong, size: core::ffi::c_ulong) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn find_first_zero_bit(addr: *const core::ffi::c_ulong, size: core::ffi::c_ulong) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn find_last_bit(addr: *const core::ffi::c_ulong, size: core::ffi::c_ulong) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn find_next_bit(addr: *const core::ffi::c_ulong, size: core::ffi::c_ulong, offset: core::ffi::c_ulong) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn find_next_zero_bit(addr: *const core::ffi::c_ulong, size: core::ffi::c_ulong, offset: core::ffi::c_ulong) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn __bitmap_and(dst: *mut core::ffi::c_ulong, bitmap1: *const core::ffi::c_ulong, bitmap2: *const core::ffi::c_ulong, bits: core::ffi::c_int);
}
extern "C" {
    pub fn __bitmap_or(dst: *mut core::ffi::c_ulong, bitmap1: *const core::ffi::c_ulong, bitmap2: *const core::ffi::c_ulong, bits: core::ffi::c_int);
}
extern "C" {
    pub fn __bitmap_xor(dst: *mut core::ffi::c_ulong, bitmap1: *const core::ffi::c_ulong, bitmap2: *const core::ffi::c_ulong, bits: core::ffi::c_int);
}
#[doc = " Representation of hartmask"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sbi_hartmask {
    pub bits: [core::ffi::c_ulong; 2usize],
}
#[test]
fn bindgen_test_layout_sbi_hartmask() {
    assert_eq!(::core::mem::size_of::<sbi_hartmask>(), 16usize, concat!("Size of: ", stringify!(sbi_hartmask)));
    assert_eq!(::core::mem::align_of::<sbi_hartmask>(), 8usize, concat!("Alignment of ", stringify!(sbi_hartmask)));
    fn test_field_bits() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<sbi_hartmask>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).bits) as usize - ptr as usize
            },
            0usize,
            concat!("Offset of field: ", stringify!(sbi_hartmask), "::", stringify!(bits))
        );
    }
    test_field_bits();
}
pub const sbi_pmu_hw_generic_events_t_SBI_PMU_HW_NO_EVENT: sbi_pmu_hw_generic_events_t = 0;
pub const sbi_pmu_hw_generic_events_t_SBI_PMU_HW_CPU_CYCLES: sbi_pmu_hw_generic_events_t = 1;
pub const sbi_pmu_hw_generic_events_t_SBI_PMU_HW_INSTRUCTIONS: sbi_pmu_hw_generic_events_t = 2;
pub const sbi_pmu_hw_generic_events_t_SBI_PMU_HW_CACHE_REFERENCES: sbi_pmu_hw_generic_events_t = 3;
pub const sbi_pmu_hw_generic_events_t_SBI_PMU_HW_CACHE_MISSES: sbi_pmu_hw_generic_events_t = 4;
pub const sbi_pmu_hw_generic_events_t_SBI_PMU_HW_BRANCH_INSTRUCTIONS: sbi_pmu_hw_generic_events_t = 5;
pub const sbi_pmu_hw_generic_events_t_SBI_PMU_HW_BRANCH_MISSES: sbi_pmu_hw_generic_events_t = 6;
pub const sbi_pmu_hw_generic_events_t_SBI_PMU_HW_BUS_CYCLES: sbi_pmu_hw_generic_events_t = 7;
pub const sbi_pmu_hw_generic_events_t_SBI_PMU_HW_STALLED_CYCLES_FRONTEND: sbi_pmu_hw_generic_events_t = 8;
pub const sbi_pmu_hw_generic_events_t_SBI_PMU_HW_STALLED_CYCLES_BACKEND: sbi_pmu_hw_generic_events_t = 9;
pub const sbi_pmu_hw_generic_events_t_SBI_PMU_HW_REF_CPU_CYCLES: sbi_pmu_hw_generic_events_t = 10;
pub const sbi_pmu_hw_generic_events_t_SBI_PMU_HW_GENERAL_MAX: sbi_pmu_hw_generic_events_t = 11;
#[doc = " General pmu event codes specified in SBI PMU extension"]
pub type sbi_pmu_hw_generic_events_t = core::ffi::c_uint;
pub const sbi_pmu_hw_cache_id_SBI_PMU_HW_CACHE_L1D: sbi_pmu_hw_cache_id = 0;
pub const sbi_pmu_hw_cache_id_SBI_PMU_HW_CACHE_L1I: sbi_pmu_hw_cache_id = 1;
pub const sbi_pmu_hw_cache_id_SBI_PMU_HW_CACHE_LL: sbi_pmu_hw_cache_id = 2;
pub const sbi_pmu_hw_cache_id_SBI_PMU_HW_CACHE_DTLB: sbi_pmu_hw_cache_id = 3;
pub const sbi_pmu_hw_cache_id_SBI_PMU_HW_CACHE_ITLB: sbi_pmu_hw_cache_id = 4;
pub const sbi_pmu_hw_cache_id_SBI_PMU_HW_CACHE_BPU: sbi_pmu_hw_cache_id = 5;
pub const sbi_pmu_hw_cache_id_SBI_PMU_HW_CACHE_NODE: sbi_pmu_hw_cache_id = 6;
pub const sbi_pmu_hw_cache_id_SBI_PMU_HW_CACHE_MAX: sbi_pmu_hw_cache_id = 7;
#[doc = " Generalized hardware cache events:"]
#[doc = ""]
#[doc = "       { L1-D, L1-I, LLC, ITLB, DTLB, BPU, NODE } x"]
#[doc = "       { read, write, prefetch } x"]
#[doc = "       { accesses, misses }"]
pub type sbi_pmu_hw_cache_id = core::ffi::c_uint;
pub const sbi_pmu_hw_cache_op_id_SBI_PMU_HW_CACHE_OP_READ: sbi_pmu_hw_cache_op_id = 0;
pub const sbi_pmu_hw_cache_op_id_SBI_PMU_HW_CACHE_OP_WRITE: sbi_pmu_hw_cache_op_id = 1;
pub const sbi_pmu_hw_cache_op_id_SBI_PMU_HW_CACHE_OP_PREFETCH: sbi_pmu_hw_cache_op_id = 2;
pub const sbi_pmu_hw_cache_op_id_SBI_PMU_HW_CACHE_OP_MAX: sbi_pmu_hw_cache_op_id = 3;
pub type sbi_pmu_hw_cache_op_id = core::ffi::c_uint;
pub const sbi_pmu_hw_cache_op_result_id_SBI_PMU_HW_CACHE_RESULT_ACCESS: sbi_pmu_hw_cache_op_result_id = 0;
pub const sbi_pmu_hw_cache_op_result_id_SBI_PMU_HW_CACHE_RESULT_MISS: sbi_pmu_hw_cache_op_result_id = 1;
pub const sbi_pmu_hw_cache_op_result_id_SBI_PMU_HW_CACHE_RESULT_MAX: sbi_pmu_hw_cache_op_result_id = 2;
pub type sbi_pmu_hw_cache_op_result_id = core::ffi::c_uint;
pub const sbi_pmu_fw_event_code_id_SBI_PMU_FW_MISALIGNED_LOAD: sbi_pmu_fw_event_code_id = 0;
pub const sbi_pmu_fw_event_code_id_SBI_PMU_FW_MISALIGNED_STORE: sbi_pmu_fw_event_code_id = 1;
pub const sbi_pmu_fw_event_code_id_SBI_PMU_FW_ACCESS_LOAD: sbi_pmu_fw_event_code_id = 2;
pub const sbi_pmu_fw_event_code_id_SBI_PMU_FW_ACCESS_STORE: sbi_pmu_fw_event_code_id = 3;
pub const sbi_pmu_fw_event_code_id_SBI_PMU_FW_ILLEGAL_INSN: sbi_pmu_fw_event_code_id = 4;
pub const sbi_pmu_fw_event_code_id_SBI_PMU_FW_SET_TIMER: sbi_pmu_fw_event_code_id = 5;
pub const sbi_pmu_fw_event_code_id_SBI_PMU_FW_IPI_SENT: sbi_pmu_fw_event_code_id = 6;
pub const sbi_pmu_fw_event_code_id_SBI_PMU_FW_IPI_RECVD: sbi_pmu_fw_event_code_id = 7;
pub const sbi_pmu_fw_event_code_id_SBI_PMU_FW_FENCE_I_SENT: sbi_pmu_fw_event_code_id = 8;
pub const sbi_pmu_fw_event_code_id_SBI_PMU_FW_FENCE_I_RECVD: sbi_pmu_fw_event_code_id = 9;
pub const sbi_pmu_fw_event_code_id_SBI_PMU_FW_SFENCE_VMA_SENT: sbi_pmu_fw_event_code_id = 10;
pub const sbi_pmu_fw_event_code_id_SBI_PMU_FW_SFENCE_VMA_RCVD: sbi_pmu_fw_event_code_id = 11;
pub const sbi_pmu_fw_event_code_id_SBI_PMU_FW_SFENCE_VMA_ASID_SENT: sbi_pmu_fw_event_code_id = 12;
pub const sbi_pmu_fw_event_code_id_SBI_PMU_FW_SFENCE_VMA_ASID_RCVD: sbi_pmu_fw_event_code_id = 13;
pub const sbi_pmu_fw_event_code_id_SBI_PMU_FW_HFENCE_GVMA_SENT: sbi_pmu_fw_event_code_id = 14;
pub const sbi_pmu_fw_event_code_id_SBI_PMU_FW_HFENCE_GVMA_RCVD: sbi_pmu_fw_event_code_id = 15;
pub const sbi_pmu_fw_event_code_id_SBI_PMU_FW_HFENCE_GVMA_VMID_SENT: sbi_pmu_fw_event_code_id = 16;
pub const sbi_pmu_fw_event_code_id_SBI_PMU_FW_HFENCE_GVMA_VMID_RCVD: sbi_pmu_fw_event_code_id = 17;
pub const sbi_pmu_fw_event_code_id_SBI_PMU_FW_HFENCE_VVMA_SENT: sbi_pmu_fw_event_code_id = 18;
pub const sbi_pmu_fw_event_code_id_SBI_PMU_FW_HFENCE_VVMA_RCVD: sbi_pmu_fw_event_code_id = 19;
pub const sbi_pmu_fw_event_code_id_SBI_PMU_FW_HFENCE_VVMA_ASID_SENT: sbi_pmu_fw_event_code_id = 20;
pub const sbi_pmu_fw_event_code_id_SBI_PMU_FW_HFENCE_VVMA_ASID_RCVD: sbi_pmu_fw_event_code_id = 21;
pub const sbi_pmu_fw_event_code_id_SBI_PMU_FW_MAX: sbi_pmu_fw_event_code_id = 22;
#[doc = " Special \"firmware\" events provided by the OpenSBI, even if the hardware"]
#[doc = " does not support performance events. These events are encoded as a raw"]
#[doc = " event type in Linux kernel perf framework."]
pub type sbi_pmu_fw_event_code_id = core::ffi::c_uint;
pub const sbi_pmu_event_type_id_SBI_PMU_EVENT_TYPE_HW: sbi_pmu_event_type_id = 0;
pub const sbi_pmu_event_type_id_SBI_PMU_EVENT_TYPE_HW_CACHE: sbi_pmu_event_type_id = 1;
pub const sbi_pmu_event_type_id_SBI_PMU_EVENT_TYPE_HW_RAW: sbi_pmu_event_type_id = 2;
pub const sbi_pmu_event_type_id_SBI_PMU_EVENT_TYPE_FW: sbi_pmu_event_type_id = 15;
pub const sbi_pmu_event_type_id_SBI_PMU_EVENT_TYPE_MAX: sbi_pmu_event_type_id = 16;
#[doc = " SBI PMU event idx type"]
pub type sbi_pmu_event_type_id = core::ffi::c_uint;
pub const sbi_pmu_ctr_type_SBI_PMU_CTR_TYPE_HW: sbi_pmu_ctr_type = 0;
pub const sbi_pmu_ctr_type_SBI_PMU_CTR_TYPE_FW: sbi_pmu_ctr_type = 1;
#[doc = " SBI PMU counter type"]
pub type sbi_pmu_ctr_type = core::ffi::c_uint;
#[doc = " Representation of per-HART scratch space"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sbi_scratch {
    #[doc = " Start (or base) address of firmware linked to OpenSBI library"]
    pub fw_start: core::ffi::c_ulong,
    #[doc = " Size (in bytes) of firmware linked to OpenSBI library"]
    pub fw_size: core::ffi::c_ulong,
    #[doc = " Arg1 (or 'a1' register) of next booting stage for this HART"]
    pub next_arg1: core::ffi::c_ulong,
    #[doc = " Address of next booting stage for this HART"]
    pub next_addr: core::ffi::c_ulong,
    #[doc = " Priviledge mode of next booting stage for this HART"]
    pub next_mode: core::ffi::c_ulong,
    #[doc = " Warm boot entry point address for this HART"]
    pub warmboot_addr: core::ffi::c_ulong,
    #[doc = " Address of sbi_platform"]
    pub platform_addr: core::ffi::c_ulong,
    #[doc = " Address of HART ID to sbi_scratch conversion function"]
    pub hartid_to_scratch: core::ffi::c_ulong,
    #[doc = " Address of trap exit function"]
    pub trap_exit: core::ffi::c_ulong,
    #[doc = " Temporary storage"]
    pub tmp0: core::ffi::c_ulong,
    #[doc = " Options for OpenSBI library"]
    pub options: core::ffi::c_ulong,
}
#[test]
fn bindgen_test_layout_sbi_scratch() {
    assert_eq!(::core::mem::size_of::<sbi_scratch>(), 88usize, concat!("Size of: ", stringify!(sbi_scratch)));
    assert_eq!(::core::mem::align_of::<sbi_scratch>(), 8usize, concat!("Alignment of ", stringify!(sbi_scratch)));
    fn test_field_fw_start() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<sbi_scratch>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).fw_start) as usize - ptr as usize
            },
            0usize,
            concat!("Offset of field: ", stringify!(sbi_scratch), "::", stringify!(fw_start))
        );
    }
    test_field_fw_start();
    fn test_field_fw_size() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<sbi_scratch>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).fw_size) as usize - ptr as usize
            },
            8usize,
            concat!("Offset of field: ", stringify!(sbi_scratch), "::", stringify!(fw_size))
        );
    }
    test_field_fw_size();
    fn test_field_next_arg1() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<sbi_scratch>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).next_arg1) as usize - ptr as usize
            },
            16usize,
            concat!("Offset of field: ", stringify!(sbi_scratch), "::", stringify!(next_arg1))
        );
    }
    test_field_next_arg1();
    fn test_field_next_addr() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<sbi_scratch>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).next_addr) as usize - ptr as usize
            },
            24usize,
            concat!("Offset of field: ", stringify!(sbi_scratch), "::", stringify!(next_addr))
        );
    }
    test_field_next_addr();
    fn test_field_next_mode() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<sbi_scratch>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).next_mode) as usize - ptr as usize
            },
            32usize,
            concat!("Offset of field: ", stringify!(sbi_scratch), "::", stringify!(next_mode))
        );
    }
    test_field_next_mode();
    fn test_field_warmboot_addr() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<sbi_scratch>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).warmboot_addr) as usize - ptr as usize
            },
            40usize,
            concat!("Offset of field: ", stringify!(sbi_scratch), "::", stringify!(warmboot_addr))
        );
    }
    test_field_warmboot_addr();
    fn test_field_platform_addr() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<sbi_scratch>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).platform_addr) as usize - ptr as usize
            },
            48usize,
            concat!("Offset of field: ", stringify!(sbi_scratch), "::", stringify!(platform_addr))
        );
    }
    test_field_platform_addr();
    fn test_field_hartid_to_scratch() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<sbi_scratch>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).hartid_to_scratch) as usize - ptr as usize
            },
            56usize,
            concat!("Offset of field: ", stringify!(sbi_scratch), "::", stringify!(hartid_to_scratch))
        );
    }
    test_field_hartid_to_scratch();
    fn test_field_trap_exit() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<sbi_scratch>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).trap_exit) as usize - ptr as usize
            },
            64usize,
            concat!("Offset of field: ", stringify!(sbi_scratch), "::", stringify!(trap_exit))
        );
    }
    test_field_trap_exit();
    fn test_field_tmp0() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<sbi_scratch>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).tmp0) as usize - ptr as usize
            },
            72usize,
            concat!("Offset of field: ", stringify!(sbi_scratch), "::", stringify!(tmp0))
        );
    }
    test_field_tmp0();
    fn test_field_options() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<sbi_scratch>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).options) as usize - ptr as usize
            },
            80usize,
            concat!("Offset of field: ", stringify!(sbi_scratch), "::", stringify!(options))
        );
    }
    test_field_options();
}
#[doc = " Disable prints during boot"]
pub const sbi_scratch_options_SBI_SCRATCH_NO_BOOT_PRINTS: sbi_scratch_options = 1;
#[doc = " Enable runtime debug prints"]
pub const sbi_scratch_options_SBI_SCRATCH_DEBUG_PRINTS: sbi_scratch_options = 2;
#[doc = " Possible options for OpenSBI library"]
pub type sbi_scratch_options = core::ffi::c_uint;
extern "C" {
    #[doc = " Initialize scratch table and allocator"]
    pub fn sbi_scratch_init(scratch: *mut sbi_scratch) -> core::ffi::c_int;
}
extern "C" {
    #[doc = " Allocate from extra space in sbi_scratch"]
    #[doc = ""]
    #[doc = " @return zero on failure and non-zero (>= SBI_SCRATCH_EXTRA_SPACE_OFFSET)"]
    #[doc = " on success"]
    pub fn sbi_scratch_alloc_offset(size: core::ffi::c_ulong) -> core::ffi::c_ulong;
}
extern "C" {
    #[doc = " Free-up extra space in sbi_scratch"]
    pub fn sbi_scratch_free_offset(offset: core::ffi::c_ulong);
}
extern "C" {
    #[doc = " HART id to scratch table"]
    pub static mut hartid_to_scratch_table: [*mut sbi_scratch; 0usize];
}
extern "C" {
    #[doc = " Last HART id having a sbi_scratch pointer"]
    pub static mut last_hartid_having_scratch: u32_;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sbi_domain_memregion {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sbi_trap_info {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sbi_trap_regs {
    _unused: [u8; 0],
}
#[doc = " Platform has fault delegation support"]
pub const sbi_platform_features_SBI_PLATFORM_HAS_MFAULTS_DELEGATION: sbi_platform_features = 2;
#[doc = " Last index of Platform features"]
pub const sbi_platform_features_SBI_PLATFORM_HAS_LAST_FEATURE: sbi_platform_features = 2;
#[doc = " Possible feature flags of a platform"]
pub type sbi_platform_features = core::ffi::c_uint;
#[doc = " Platform functions"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sbi_platform_operations {
    pub nascent_init: ::core::option::Option<unsafe extern "C" fn() -> core::ffi::c_int>,
    #[doc = " Platform early initialization"]
    pub early_init: ::core::option::Option<unsafe extern "C" fn(cold_boot: bool_) -> core::ffi::c_int>,
    #[doc = " Platform final initialization"]
    pub final_init: ::core::option::Option<unsafe extern "C" fn(cold_boot: bool_) -> core::ffi::c_int>,
    #[doc = " Platform early exit"]
    pub early_exit: ::core::option::Option<unsafe extern "C" fn()>,
    #[doc = " Platform final exit"]
    pub final_exit: ::core::option::Option<unsafe extern "C" fn()>,
    #[doc = " For platforms that do not implement misa, non-standard"]
    #[doc = " methods are needed to determine cpu extension."]
    pub misa_check_extension: ::core::option::Option<unsafe extern "C" fn(ext: core::ffi::c_char) -> core::ffi::c_int>,
    #[doc = " For platforms that do not implement misa, non-standard"]
    #[doc = " methods are needed to get MXL field of misa."]
    pub misa_get_xlen: ::core::option::Option<unsafe extern "C" fn() -> core::ffi::c_int>,
    #[doc = " Initialize (or populate) HART extensions for the platform"]
    pub extensions_init: ::core::option::Option<unsafe extern "C" fn() -> core::ffi::c_int>,
    #[doc = " Initialize (or populate) domains for the platform"]
    pub domains_init: ::core::option::Option<unsafe extern "C" fn() -> core::ffi::c_int>,
    #[doc = " Initialize hw performance counters"]
    pub pmu_init: ::core::option::Option<unsafe extern "C" fn() -> core::ffi::c_int>,
    #[doc = " Get platform specific mhpmevent value"]
    pub pmu_xlate_to_mhpmevent: ::core::option::Option<unsafe extern "C" fn(event_idx: u32, data: u64) -> u64>,
    #[doc = " Initialize the platform console"]
    pub console_init: ::core::option::Option<unsafe extern "C" fn() -> core::ffi::c_int>,
    #[doc = " Initialize the platform interrupt controller for current HART"]
    pub irqchip_init: ::core::option::Option<unsafe extern "C" fn(cold_boot: bool_) -> core::ffi::c_int>,
    #[doc = " Exit the platform interrupt controller for current HART"]
    pub irqchip_exit: ::core::option::Option<unsafe extern "C" fn()>,
    #[doc = " Initialize IPI for current HART"]
    pub ipi_init: ::core::option::Option<unsafe extern "C" fn(cold_boot: bool_) -> core::ffi::c_int>,
    #[doc = " Exit IPI for current HART"]
    pub ipi_exit: ::core::option::Option<unsafe extern "C" fn()>,
    #[doc = " Get tlb flush limit value"]
    pub get_tlbr_flush_limit: ::core::option::Option<unsafe extern "C" fn() -> u64_>,
    #[doc = " Initialize platform timer for current HART"]
    pub timer_init: ::core::option::Option<unsafe extern "C" fn(cold_boot: bool_) -> core::ffi::c_int>,
    #[doc = " Exit platform timer for current HART"]
    pub timer_exit: ::core::option::Option<unsafe extern "C" fn()>,
    #[doc = " platform specific SBI extension implementation probe function"]
    pub vendor_ext_check: ::core::option::Option<unsafe extern "C" fn(extid: core::ffi::c_long) -> core::ffi::c_int>,
    #[doc = " platform specific SBI extension implementation provider"]
    pub vendor_ext_provider:
        ::core::option::Option<unsafe extern "C" fn(extid: core::ffi::c_long, funcid: core::ffi::c_long, regs: *const sbi_trap_regs, out_value: *mut core::ffi::c_ulong, out_trap: *mut sbi_trap_info) -> core::ffi::c_int>,
}
#[test]
fn bindgen_test_layout_sbi_platform_operations() {
    assert_eq!(::core::mem::size_of::<sbi_platform_operations>(), 168usize, concat!("Size of: ", stringify!(sbi_platform_operations)));
    assert_eq!(::core::mem::align_of::<sbi_platform_operations>(), 8usize, concat!("Alignment of ", stringify!(sbi_platform_operations)));
    fn test_field_nascent_init() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<sbi_platform_operations>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).nascent_init) as usize - ptr as usize
            },
            0usize,
            concat!("Offset of field: ", stringify!(sbi_platform_operations), "::", stringify!(nascent_init))
        );
    }
    test_field_nascent_init();
    fn test_field_early_init() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<sbi_platform_operations>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).early_init) as usize - ptr as usize
            },
            8usize,
            concat!("Offset of field: ", stringify!(sbi_platform_operations), "::", stringify!(early_init))
        );
    }
    test_field_early_init();
    fn test_field_final_init() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<sbi_platform_operations>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).final_init) as usize - ptr as usize
            },
            16usize,
            concat!("Offset of field: ", stringify!(sbi_platform_operations), "::", stringify!(final_init))
        );
    }
    test_field_final_init();
    fn test_field_early_exit() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<sbi_platform_operations>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).early_exit) as usize - ptr as usize
            },
            24usize,
            concat!("Offset of field: ", stringify!(sbi_platform_operations), "::", stringify!(early_exit))
        );
    }
    test_field_early_exit();
    fn test_field_final_exit() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<sbi_platform_operations>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).final_exit) as usize - ptr as usize
            },
            32usize,
            concat!("Offset of field: ", stringify!(sbi_platform_operations), "::", stringify!(final_exit))
        );
    }
    test_field_final_exit();
    fn test_field_misa_check_extension() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<sbi_platform_operations>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).misa_check_extension) as usize - ptr as usize
            },
            40usize,
            concat!("Offset of field: ", stringify!(sbi_platform_operations), "::", stringify!(misa_check_extension))
        );
    }
    test_field_misa_check_extension();
    fn test_field_misa_get_xlen() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<sbi_platform_operations>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).misa_get_xlen) as usize - ptr as usize
            },
            48usize,
            concat!("Offset of field: ", stringify!(sbi_platform_operations), "::", stringify!(misa_get_xlen))
        );
    }
    test_field_misa_get_xlen();
    fn test_field_extensions_init() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<sbi_platform_operations>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).extensions_init) as usize - ptr as usize
            },
            56usize,
            concat!("Offset of field: ", stringify!(sbi_platform_operations), "::", stringify!(extensions_init))
        );
    }
    test_field_extensions_init();
    fn test_field_domains_init() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<sbi_platform_operations>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).domains_init) as usize - ptr as usize
            },
            64usize,
            concat!("Offset of field: ", stringify!(sbi_platform_operations), "::", stringify!(domains_init))
        );
    }
    test_field_domains_init();
    fn test_field_pmu_init() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<sbi_platform_operations>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).pmu_init) as usize - ptr as usize
            },
            72usize,
            concat!("Offset of field: ", stringify!(sbi_platform_operations), "::", stringify!(pmu_init))
        );
    }
    test_field_pmu_init();
    fn test_field_pmu_xlate_to_mhpmevent() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<sbi_platform_operations>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).pmu_xlate_to_mhpmevent) as usize - ptr as usize
            },
            80usize,
            concat!("Offset of field: ", stringify!(sbi_platform_operations), "::", stringify!(pmu_xlate_to_mhpmevent))
        );
    }
    test_field_pmu_xlate_to_mhpmevent();
    fn test_field_console_init() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<sbi_platform_operations>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).console_init) as usize - ptr as usize
            },
            88usize,
            concat!("Offset of field: ", stringify!(sbi_platform_operations), "::", stringify!(console_init))
        );
    }
    test_field_console_init();
    fn test_field_irqchip_init() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<sbi_platform_operations>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).irqchip_init) as usize - ptr as usize
            },
            96usize,
            concat!("Offset of field: ", stringify!(sbi_platform_operations), "::", stringify!(irqchip_init))
        );
    }
    test_field_irqchip_init();
    fn test_field_irqchip_exit() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<sbi_platform_operations>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).irqchip_exit) as usize - ptr as usize
            },
            104usize,
            concat!("Offset of field: ", stringify!(sbi_platform_operations), "::", stringify!(irqchip_exit))
        );
    }
    test_field_irqchip_exit();
    fn test_field_ipi_init() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<sbi_platform_operations>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).ipi_init) as usize - ptr as usize
            },
            112usize,
            concat!("Offset of field: ", stringify!(sbi_platform_operations), "::", stringify!(ipi_init))
        );
    }
    test_field_ipi_init();
    fn test_field_ipi_exit() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<sbi_platform_operations>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).ipi_exit) as usize - ptr as usize
            },
            120usize,
            concat!("Offset of field: ", stringify!(sbi_platform_operations), "::", stringify!(ipi_exit))
        );
    }
    test_field_ipi_exit();
    fn test_field_get_tlbr_flush_limit() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<sbi_platform_operations>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).get_tlbr_flush_limit) as usize - ptr as usize
            },
            128usize,
            concat!("Offset of field: ", stringify!(sbi_platform_operations), "::", stringify!(get_tlbr_flush_limit))
        );
    }
    test_field_get_tlbr_flush_limit();
    fn test_field_timer_init() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<sbi_platform_operations>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).timer_init) as usize - ptr as usize
            },
            136usize,
            concat!("Offset of field: ", stringify!(sbi_platform_operations), "::", stringify!(timer_init))
        );
    }
    test_field_timer_init();
    fn test_field_timer_exit() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<sbi_platform_operations>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).timer_exit) as usize - ptr as usize
            },
            144usize,
            concat!("Offset of field: ", stringify!(sbi_platform_operations), "::", stringify!(timer_exit))
        );
    }
    test_field_timer_exit();
    fn test_field_vendor_ext_check() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<sbi_platform_operations>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).vendor_ext_check) as usize - ptr as usize
            },
            152usize,
            concat!("Offset of field: ", stringify!(sbi_platform_operations), "::", stringify!(vendor_ext_check))
        );
    }
    test_field_vendor_ext_check();
    fn test_field_vendor_ext_provider() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<sbi_platform_operations>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).vendor_ext_provider) as usize - ptr as usize
            },
            160usize,
            concat!("Offset of field: ", stringify!(sbi_platform_operations), "::", stringify!(vendor_ext_provider))
        );
    }
    test_field_vendor_ext_provider();
}
#[doc = " Representation of a platform"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sbi_platform {
    #[doc = " OpenSBI version this sbi_platform is based on."]
    #[doc = " It's a 32-bit value where upper 16-bits are major number"]
    #[doc = " and lower 16-bits are minor number"]
    pub opensbi_version: u32_,
    #[doc = " OpenSBI platform version released by vendor."]
    #[doc = " It's a 32-bit value where upper 16-bits are major number"]
    #[doc = " and lower 16-bits are minor number"]
    pub platform_version: u32_,
    #[doc = " Name of the platform"]
    pub name: [core::ffi::c_char; 64usize],
    #[doc = " Supported features"]
    pub features: u64_,
    #[doc = " Total number of HARTs"]
    pub hart_count: u32_,
    #[doc = " Per-HART stack size for exception/interrupt handling"]
    pub hart_stack_size: u32_,
    #[doc = " Pointer to sbi platform operations"]
    pub platform_ops_addr: core::ffi::c_ulong,
    #[doc = " Pointer to system firmware specific context"]
    pub firmware_context: core::ffi::c_ulong,
    #[doc = " HART index to HART id table"]
    #[doc = ""]
    #[doc = " For used HART index <abc>:"]
    #[doc = "     hart_index2id[<abc>] = some HART id"]
    #[doc = " For unused HART index <abc>:"]
    #[doc = "     hart_index2id[<abc>] = -1U"]
    #[doc = ""]
    #[doc = " If hart_index2id == NULL then we assume identity mapping"]
    #[doc = "     hart_index2id[<abc>] = <abc>"]
    #[doc = ""]
    #[doc = " We have only two restrictions:"]
    #[doc = " 1. HART index < sbi_platform hart_count"]
    #[doc = " 2. HART id < SBI_HARTMASK_MAX_BITS"]
    pub hart_index2id: *const u32_,
}
#[test]
fn bindgen_test_layout_sbi_platform() {
    assert_eq!(::core::mem::size_of::<sbi_platform>(), 112usize, concat!("Size of: ", stringify!(sbi_platform)));
    assert_eq!(::core::mem::align_of::<sbi_platform>(), 8usize, concat!("Alignment of ", stringify!(sbi_platform)));
    fn test_field_opensbi_version() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<sbi_platform>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).opensbi_version) as usize - ptr as usize
            },
            0usize,
            concat!("Offset of field: ", stringify!(sbi_platform), "::", stringify!(opensbi_version))
        );
    }
    test_field_opensbi_version();
    fn test_field_platform_version() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<sbi_platform>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).platform_version) as usize - ptr as usize
            },
            4usize,
            concat!("Offset of field: ", stringify!(sbi_platform), "::", stringify!(platform_version))
        );
    }
    test_field_platform_version();
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<sbi_platform>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            8usize,
            concat!("Offset of field: ", stringify!(sbi_platform), "::", stringify!(name))
        );
    }
    test_field_name();
    fn test_field_features() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<sbi_platform>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).features) as usize - ptr as usize
            },
            72usize,
            concat!("Offset of field: ", stringify!(sbi_platform), "::", stringify!(features))
        );
    }
    test_field_features();
    fn test_field_hart_count() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<sbi_platform>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).hart_count) as usize - ptr as usize
            },
            80usize,
            concat!("Offset of field: ", stringify!(sbi_platform), "::", stringify!(hart_count))
        );
    }
    test_field_hart_count();
    fn test_field_hart_stack_size() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<sbi_platform>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).hart_stack_size) as usize - ptr as usize
            },
            84usize,
            concat!("Offset of field: ", stringify!(sbi_platform), "::", stringify!(hart_stack_size))
        );
    }
    test_field_hart_stack_size();
    fn test_field_platform_ops_addr() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<sbi_platform>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).platform_ops_addr) as usize - ptr as usize
            },
            88usize,
            concat!("Offset of field: ", stringify!(sbi_platform), "::", stringify!(platform_ops_addr))
        );
    }
    test_field_platform_ops_addr();
    fn test_field_firmware_context() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<sbi_platform>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).firmware_context) as usize - ptr as usize
            },
            96usize,
            concat!("Offset of field: ", stringify!(sbi_platform), "::", stringify!(firmware_context))
        );
    }
    test_field_firmware_context();
    fn test_field_hart_index2id() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<sbi_platform>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).hart_index2id) as usize - ptr as usize
            },
            104usize,
            concat!("Offset of field: ", stringify!(sbi_platform), "::", stringify!(hart_index2id))
        );
    }
    test_field_hart_index2id();
}
extern "C" {
    #[doc = " Get HART index for the given HART"]
    #[doc = ""]
    #[doc = " @param plat pointer to struct sbi_platform"]
    #[doc = " @param hartid HART ID"]
    #[doc = ""]
    #[doc = " @return 0 <= value < hart_count for valid HART otherwise -1U"]
    pub fn sbi_platform_hart_index(plat: *const sbi_platform, hartid: u32_) -> u32_;
}
extern "C" {
    #[doc = " Get the platform features in string format"]
    #[doc = ""]
    #[doc = " @param plat pointer to struct sbi_platform"]
    #[doc = " @param features_str pointer to a char array where the features string will be"]
    #[doc = "\t\t       updated"]
    #[doc = " @param nfstr length of the features_str. The feature string will be truncated"]
    #[doc = "\t\tif nfstr is not long enough."]
    pub fn sbi_platform_get_features_str(plat: *const sbi_platform, features_str: *mut core::ffi::c_char, nfstr: core::ffi::c_int);
}
extern "C" {
    pub fn sbi_strcmp(a: *const core::ffi::c_char, b: *const core::ffi::c_char) -> core::ffi::c_int;
}
extern "C" {
    pub fn sbi_strncmp(a: *const core::ffi::c_char, b: *const core::ffi::c_char, count: size_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn sbi_strlen(str_: *const core::ffi::c_char) -> size_t;
}
extern "C" {
    pub fn sbi_strnlen(str_: *const core::ffi::c_char, count: size_t) -> size_t;
}
extern "C" {
    pub fn sbi_strcpy(dest: *mut core::ffi::c_char, src: *const core::ffi::c_char) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn sbi_strncpy(dest: *mut core::ffi::c_char, src: *const core::ffi::c_char, count: size_t) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn sbi_strchr(s: *const core::ffi::c_char, c: core::ffi::c_int) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn sbi_strrchr(s: *const core::ffi::c_char, c: core::ffi::c_int) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn sbi_memset(s: *mut core::ffi::c_void, c: core::ffi::c_int, count: size_t) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn sbi_memcpy(dest: *mut core::ffi::c_void, src: *const core::ffi::c_void, count: size_t) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn sbi_memmove(dest: *mut core::ffi::c_void, src: *const core::ffi::c_void, count: size_t) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn sbi_memcmp(s1: *const core::ffi::c_void, s2: *const core::ffi::c_void, count: size_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn sbi_memchr(s: *const core::ffi::c_void, c: core::ffi::c_int, count: size_t) -> *mut core::ffi::c_void;
}
